<?xml version="1.0" encoding="UTF-8" ?>


<config>

	<luceneMatchVersion>8.7.0</luceneMatchVersion>
	<!-- <instanceDir>/mnt/sda1/opt/solr-8.7.0</instanceDir> -->


	<!-- <lib/> directives can be used to instruct Solr to load any Jars identified 
		and use them to resolve any "plugins" specified in your solrconfig.xml or 
		schema.xml (ie: Analyzers, Request Handlers, etc...). All directories and 
		paths are resolved relative to the instanceDir. Please note that <lib/> directives 
		are processed in the order that they appear in your solrconfig.xml file, 
		and are "stacked" on top of each other when building a ClassLoader - so if 
		you have plugin jars with dependencies on other jars, the "lower level" dependency 
		jars should be loaded first. If a "./lib" directory exists in your instanceDir, 
		all files found in it are included as if you had used the following syntax... 
		<lib dir="./lib" /> -->


	<lib dir="/mycores/juris/libs/" regex=".*\.jar" />

	<lib dir="../../contrib/extraction/lib" regex=".*\.jar" />
	<lib dir="../../dist/" regex="solr-cell-\d.*\.jar" />

	<lib dir="../../contrib/clustering/lib/" regex=".*\.jar" />
	<lib dir="../../dist/" regex="solr-clustering-\d.*\.jar" />

	<lib dir="../../contrib/langid/lib/" regex=".*\.jar" />
	<lib dir="../../dist/" regex="solr-langid-\d.*\.jar" />

	<lib dir="../../dist/" regex="solr-ltr-\d.*\.jar" />

	<lib dir="../../contrib/velocity/lib" regex=".*\.jar" />
	<lib dir="../../dist/" regex="solr-velocity-\d.*\.jar" />

	<dataDir>${solr.data.dir:}</dataDir>

	<directoryFactory name="DirectoryFactory"
		class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}" />

	<codecFactory class="solr.SchemaCodecFactory" />

	<indexConfig>
		<lockType>${solr.lock.type:native}</lockType>
		<infoStream>true</infoStream>
	</indexConfig>

	<updateHandler class="solr.DirectUpdateHandler2">

		<updateLog>
			<str name="dir">${solr.ulog.dir:}</str>
			<int name="numVersionBuckets">${solr.ulog.numVersionBuckets:65536}</int>
		</updateLog>

		<autoCommit>
			<maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
			<openSearcher>false</openSearcher>
		</autoCommit>

		<autoSoftCommit>
			<maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
		</autoSoftCommit>

	</updateHandler>


	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Query section - these settings control query time things like caches ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<query>


		<maxBooleanClauses>${solr.max.booleanClauses:1024}</maxBooleanClauses>

		<slowQueryThresholdMillis>-1</slowQueryThresholdMillis>

		<filterCache class="solr.FastLRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<queryResultCache class="solr.LRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<documentCache class="solr.LRUCache" size="512"
			initialSize="512" autowarmCount="0" />

		<!-- custom cache currently used by block join -->
		<cache name="perSegFilter" class="solr.search.LRUCache"
			size="10" initialSize="0" autowarmCount="10"
			regenerator="solr.NoOpRegenerator" />

		<cache enable="${solr.ltr.enabled:false}" name="QUERY_DOC_FV"
			class="solr.search.LRUCache" size="4096" initialSize="2048"
			autowarmCount="4096" regenerator="solr.search.NoOpRegenerator" />

		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<queryResultWindowSize>20</queryResultWindowSize>

		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<listener event="newSearcher"
			class="solr.QuerySenderListener">
			<arr name="queries">
				<!-- <lst><str name="q">solr</str><str name="sort">price asc</str></lst> 
					<lst><str name="q">rocks</str><str name="sort">weight asc</str></lst> -->
			</arr>
		</listener>
		<listener event="firstSearcher"
			class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
			</arr>
		</listener>
		<useColdSearcher>false</useColdSearcher>

	</query>


	<requestDispatcher>

		<httpCaching never304="true" />

	</requestDispatcher>






	<requestHandler name="/standard"
		class="solr.StandardRequestHandler">
		<bool name="httpCaching">true</bool>
	</requestHandler>


	<requestHandler name="/update/extract" startup="lazy"
		class="solr.extraction.ExtractingRequestHandler">
		<lst name="defaults">
			<str name="lowernames">true</str>
			<str name="uprefix">ignored_</str>

			<!-- capture link hrefs but ignore div attributes -->
			<str name="captureAttr">true</str>
			<str name="fmap.a">links</str>
			<str name="fmap.div">ignored_</str>
		</lst>
	</requestHandler>


	<searchComponent name="spellcheck"
		class="solr.SpellCheckComponent">

		<str name="queryAnalyzerFieldType">text_general</str>

		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="field">decisao</str>
			<str name="classname">solr.DirectSolrSpellChecker</str>
			<!-- the spellcheck distance measure used, the default is the internal 
				levenshtein -->
			<str name="distanceMeasure">internal</str>
			<!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
			<float name="accuracy">0.5</float>
			<!-- the maximum #edits we consider when enumerating terms: can be 1 or 
				2 -->
			<int name="maxEdits">2</int>
			<!-- the minimum shared prefix when enumerating terms -->
			<int name="minPrefix">1</int>
			<!-- maximum number of inspections per result. -->
			<int name="maxInspections">5</int>
			<!-- minimum length of a query term to be considered for correction -->
			<int name="minQueryLength">4</int>
			<!-- maximum threshold of documents a query term can appear to be considered 
				for correction -->
			<float name="maxQueryFrequency">0.01</float>
			<!-- uncomment this to require suggestions to occur in 1% of the documents 
				<float name="thresholdTokenFrequency">.01</float> -->
		</lst>

		<!-- a spellchecker that can break or combine words. See "/spell" handler 
			below for usage -->
		<lst name="spellchecker">
			<str name="name">wordbreak</str>
			<str name="classname">solr.WordBreakSolrSpellChecker</str>
			<str name="field">name</str>
			<str name="combineWords">true</str>
			<str name="breakWords">true</str>
			<int name="maxChanges">10</int>
		</lst>

	</searchComponent>


	<requestHandler name="/spell" class="solr.SearchHandler"
		startup="lazy">
		<lst name="defaults">
			<!-- Solr will use suggestions from both the 'default' spellchecker and 
				from the 'wordbreak' spellchecker and combine them. collations (re-written 
				queries) can include a combination of corrections from both spellcheckers -->
			<str name="spellcheck.dictionary">default</str>
			<str name="spellcheck.dictionary">wordbreak</str>
			<str name="spellcheck">on</str>
			<str name="spellcheck.extendedResults">true</str>
			<str name="spellcheck.count">10</str>
			<str name="spellcheck.alternativeTermCount">5</str>
			<str name="spellcheck.maxResultsForSuggest">5</str>
			<str name="spellcheck.collate">true</str>
			<str name="spellcheck.collateExtendedResults">true</str>
			<str name="spellcheck.maxCollationTries">10</str>
			<str name="spellcheck.maxCollations">5</str>
		</lst>
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>


	<searchComponent name="suggest"
		class="solr.SuggestComponent">
		<lst name="suggester">
			<str name="name">mySuggester</str>
			<str name="lookupImpl">FuzzyLookupFactory</str>
			<str name="dictionaryImpl">DocumentDictionaryFactory</str>
			<str name="field">cat</str>
			<str name="weightField">price</str>
			<str name="suggestAnalyzerFieldType">string</str>
			<str name="buildOnStartup">false</str>
		</lst>
	</searchComponent>

	<requestHandler name="/suggest"
		class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="suggest">true</str>
			<str name="suggest.count">10</str>
		</lst>
		<arr name="components">
			<str>suggest</str>
		</arr>
	</requestHandler>

	<searchComponent name="tvComponent"
		class="solr.TermVectorComponent" />



	<!-- Brs Solr Work -->

	<initParams
		path="/update/**,/query,/select,/elevate,/spell,update">
		<lst name="defaults">
			<str name="df">decisao</str>
		</lst>
	</initParams>

	<queryParser name="brs_qp"
		class="brs.components.BrsQParserPlugin">
		<str name="fieldAliases">fieldAliases.txt</str>
	</queryParser>

	<searchComponent name="thBrsComponent"
		class="brs.components.BrsTermHighlightComponent" />

	<searchComponent
		class="brs.components.BrsHighlightComponent" name="highlight">
		<highlighting>
			<!--<highlighting class="org.apache.solr.highlight.DefaultSolrHighlighter"> -->
			<!--<highlighting class="org.apache.solr.highlight.PostingsSolrHighlighter"> -->
			<!-- Configure the standard fragmenter -->
			<!-- This could most likely be commented out in the "default" case -->
			<fragmenter name="gap" default="true"
				class="solr.highlight.GapFragmenter">
				<lst name="defaults">
					<int name="hl.fragsize">100</int>
				</lst>
			</fragmenter>

			<!-- A regular-expression-based fragmenter (for sentence extraction) -->
			<fragmenter name="regex"
				class="solr.highlight.RegexFragmenter">
				<lst name="defaults">
					<!-- slightly smaller fragsizes work better because of slop -->
					<int name="hl.fragsize">70</int>
					<!-- allow 50% slop on fragment sizes -->
					<float name="hl.regex.slop">0.5</float>
					<!-- a basic sentence pattern -->
					<str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
				</lst>
			</fragmenter>

			<!-- Configure the standard formatter -->
			<formatter name="html" default="true"
				class="solr.highlight.HtmlFormatter">
				<lst name="defaults">
					<str name="hl.simple.pre"><![CDATA[<font color="blue"><b>]]></str>
					<str name="hl.simple.post"><![CDATA[</b></font>]]></str>
				</lst>
			</formatter>

			<!-- Configure the standard encoder -->
			<encoder name="html" class="solr.highlight.HtmlEncoder"
				default="true" />


			<encoder name="html_striper"
				class="brs.components.BrsHtmlStriperEncoder" default="true" />


			<encoder name="default" class="solr.highlight.DefaultEncoder" />

			<!-- Configure the standard fragListBuilder -->
			<fragListBuilder name="simple" default="true"
				class="solr.highlight.SimpleFragListBuilder" />

			<!-- Configure the single fragListBuilder -->
			<fragListBuilder name="single"
				class="solr.highlight.SingleFragListBuilder" />

			<!-- default tag FragmentsBuilder -->
			<fragmentsBuilder name="default" default="true"
				class="solr.highlight.ScoreOrderFragmentsBuilder">
				<!-- <lst name="defaults"> <str name="hl.multiValuedSeparatorChar">/</str> 
					</lst> -->
			</fragmentsBuilder>

			<!-- multi-colored tag FragmentsBuilder -->
			<fragmentsBuilder name="colored"
				class="solr.highlight.ScoreOrderFragmentsBuilder">
				<lst name="defaults">
					<str name="hl.tag.pre"><![CDATA[<span class="highlight16">,<span class="highlight13">,<span class="highlight10">,<span class="highlight7">,<span class="highlight4">,<span class="highlight1">,<span class="highlight17">,<span class="highlight14">,<span class="highlight11">,<span class="highlight8">,<span class="highlight5">,<span class="highlight2">,<span class="highlight18">,<span class="highlight15">,<span class="highlight12">,<span class="highlight9">,<span class="highlight6">,<span class="highlight3">,<span class="highlight19">]]></str>
					<str name="hl.tag.post"><![CDATA[</span>]]></str>
				</lst>
			</fragmentsBuilder>

			<boundaryScanner name="default" default="true"
				class="solr.highlight.SimpleBoundaryScanner">
				<lst name="defaults">
					<str name="hl.bs.maxScan">10</str>
					<str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
				</lst>
			</boundaryScanner>

			<boundaryScanner name="breakIterator"
				class="solr.highlight.BreakIteratorBoundaryScanner">
				<lst name="defaults">
					<!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
					<str name="hl.bs.type">WORD</str>
					<!-- language and country are used when constructing Locale object. -->
					<!-- And the Locale object will be used when getting instance of BreakIterator -->
					<str name="hl.bs.language">pt</str>
					<str name="hl.bs.country">BR</str>
				</lst>
			</boundaryScanner>
		</highlighting>
	</searchComponent>

	<requestHandler name="/select"
		class="solr.SearchHandler">
		<!-- default values for query parameters can be specified, these will be 
			overridden by parameters in the request -->
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
			<str name="defType">brs_qp</str>
			<str name="sm">xxxsentencexxx</str>
			<str name="pm">xxxparagraphxxx</str>
			<bool name="th">true</bool>
			<!-- <str name="fl">decisao,ementa,inteiro_teor,txt_origem,data_publicacao_pesq,data_decisao_pesq</str> -->
			<str name="qf">ementa</str>
			<str name="df">ementa</str>


			<bool name="preferLocalShards">false</bool>

			<str name="hl">false</str>
			<str name="hl.fl">decisao,ementa,inteiro_teor,txt_origem,data_publicacao_pesq,data_decisao_pesq
			</str>
			<str name="hl.highlightMultiTerm">true</str>
			<str name="hl.fragsize">200</str>
			<str name="hl.useFastVectorHighlighter">true</str>
			<str name="hl.snippets">10</str>
			<str name="hl.mergeContiguous">true</str>
			<str name="hl.fragmentsBuilder">default</str>
			<str name="hl.fragmentsBuilder">colored</str>
			<str name="hl.fragListBuilder">simple</str>
			<str name="hl.usePhraseHighlighter">true</str>

			<str name="facet">false</str>
			<str name="facet.mincount">1</str>
			<str name="facet.limit">10</str>
			<str name="facet.field">tipo_documento_facet</str>
			<str name="facet.field">classe_facet</str>
			<str name="facet.field">orgao_julgador_facet</str>

		</lst>

	</requestHandler>


	<!-- A request handler that returns indented JSON by default -->
	<requestHandler name="/query" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="df">decisao</str>
		</lst>
	</requestHandler>


	<searchComponent name="clustering"
		enable="${solr.clustering.enabled:false}"
		class="solr.clustering.ClusteringComponent">


		<lst name="engine">
			<str name="name">lingo3g</str>
			<bool name="optional">true</bool>
			<str name="carrot.algorithm">com.carrotsearch.lingo3g.Lingo3GClusteringAlgorithm
			</str>
			<str name="carrot.resourcesDir">clustering/carrot2</str>
		</lst>

		<lst name="engine">
			<str name="name">lingo</str>
			<str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm
			</str>
			<str name="carrot.resourcesDir">clustering/carrot2</str>
		</lst>

		<lst name="engine">
			<str name="name">stc</str>
			<str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
			<str name="carrot.resourcesDir">clustering/carrot2</str>
		</lst>

		<lst name="engine">
			<str name="name">kmeans</str>
			<str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm
			</str>
			<str name="carrot.resourcesDir">clustering/carrot2</str>
		</lst>
	</searchComponent>


	<requestHandler name="/clustering" startup="lazy"
		enable="${solr.clustering.enabled:false}" class="solr.SearchHandler">
		<lst name="defaults">
			<bool name="clustering">true</bool>
			<bool name="clustering.results">true</bool>
			<!-- Field name with the logical "title" of a each document (optional) -->
			<str name="carrot.title">name</str>
			<!-- Field name with the logical "URL" of a each document (optional) -->
			<str name="carrot.url">id</str>
			<!-- Field name with the logical "content" of a each document (optional) -->
			<str name="carrot.snippet">features</str>
			<!-- Apply highlighter to the title/ content and use this for clustering. -->
			<bool name="carrot.produceSummary">true</bool>
			<!-- the maximum number of labels per cluster -->
			<!--<int name="carrot.numDescriptions">5</int> -->
			<!-- produce sub clusters -->
			<bool name="carrot.outputSubClusters">false</bool>

			<!-- Configure the remaining request handler parameters. -->
			<str name="defType">edismax</str>
			<str name="qf">
				text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1
				cat^1.4
			</str>
			<str name="q.alt">*:*</str>
			<str name="rows">100</str>
			<str name="fl">*,score</str>
		</lst>
		<arr name="last-components">
			<str>clustering</str>
		</arr>
	</requestHandler>


	<searchComponent name="terms"
		class="solr.TermsComponent" />

	<!-- A request handler for demonstrating the terms component -->
	<requestHandler name="/terms" class="solr.SearchHandler"
		startup="lazy">
		<lst name="defaults">
			<bool name="terms">true</bool>
			<bool name="distrib">false</bool>
		</lst>
		<arr name="components">
			<str>terms</str>
		</arr>
	</requestHandler>


	<!-- Query Elevation Component http://wiki.apache.org/solr/QueryElevationComponent 
		a search component that enables you to configure the top results for a given 
		query regardless of the normal lucene scoring. -->
	<searchComponent name="elevator"
		class="solr.QueryElevationComponent">
		<!-- pick a fieldType to analyze queries -->
		<str name="queryFieldType">string</str>
		<str name="config-file">elevate.xml</str>
	</searchComponent>

	<!-- A request handler for demonstrating the elevator component -->
	<requestHandler name="/elevate"
		class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
		</lst>
		<arr name="last-components">
			<str>elevator</str>
		</arr>
	</requestHandler>


	<queryResponseWriter name="json"
		class="solr.JSONResponseWriter">
		<!-- For the purposes of the tutorial, JSON responses are written as plain 
			text so that they are easy to read in *any* browser. If you expect a MIME 
			type of "application/json" just remove this override. -->
		<str name="content-type">text/plain; charset=UTF-8</str>
	</queryResponseWriter>

	<!-- Custom response writers can be declared as needed... -->
	<queryResponseWriter name="velocity"
		class="solr.VelocityResponseWriter" startup="lazy">
		<str name="template.base.dir">${velocity.template.base.dir:}</str>
	</queryResponseWriter>


	<!-- XSLT response writer transforms the XML output by any xslt file found 
		in Solr's conf/xslt directory. Changes to xslt files are checked for every 
		xsltCacheLifetimeSeconds. -->
	<queryResponseWriter name="xslt"
		class="solr.XSLTResponseWriter">
		<int name="xsltCacheLifetimeSeconds">5</int>
	</queryResponseWriter>


	<queryParser enable="${solr.ltr.enabled:false}" name="ltr"
		class="org.apache.solr.ltr.search.LTRQParserPlugin" />


	<transformer enable="${solr.ltr.enabled:false}"
		name="features"
		class="org.apache.solr.ltr.response.transform.LTRFeatureLoggerTransformerFactory">
		<str name="fvCacheName">QUERY_DOC_FV</str>
	</transformer>

</config>
